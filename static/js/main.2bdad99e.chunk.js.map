{"version":3,"sources":["component/TrialClass/TrialClass.js","App.js","serviceWorker.js","index.js"],"names":["TrialClass","useState","courseData","setCourseData","courseName","setCourseName","errors","setErrors","dateSelect","setDateSelect","validated","setValidated","formRef","useRef","useEffect","axios","get","then","resp","newResponse","data","forEach","course","slots","slot","moment","parseInt","catch","error","NotificationManager","Form","onSubmit","e","preventDefault","parentName","target","value","parentPhone","parentEmail","childName","childAge","date","time","newErrors","test","hasOwnProperty","Object","keys","length","post","response","success","message","current","reset","errormsg","split","key","ref","Group","controlId","Label","Control","type","placeholder","style","color","phoneNumber","email","as","onChange","map","course_name","min","Date","format","max","setDate","getDate","onKeyDown","filter","diff","timeSlot","slot_time","add","Button","variant","width","App","textAlign","marginTop","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.2bdad99e.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport \"react-notifications/lib/notifications.css\";\r\n\r\nconst TrialClass = () => {\r\n  const [courseData, setCourseData] = useState(null);\r\n  const [courseName, setCourseName] = useState(null);\r\n  const [errors, setErrors] = useState({});\r\n  const [dateSelect, setDateSelect] = useState(null);\r\n  const [validated, setValidated] = useState(false);\r\n  const formRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        \"https://script.google.com/macros/s/AKfycbzJ8Nn2ytbGO8QOkGU1kfU9q50RjDHje4Ysphyesyh-osS76wep/exec\"\r\n      )\r\n      .then((resp) => {\r\n        let newResponse = resp.data;\r\n        newResponse.forEach((course) =>\r\n          course.slots.forEach(\r\n            (slot) => (slot[\"time\"] = moment(parseInt(slot.slot)))\r\n          )\r\n        );\r\n        setCourseData(newResponse);\r\n      })\r\n      .catch((error) => {\r\n        NotificationManager.error(\"unable to get the data\", \"\", 2000);\r\n      });\r\n  }, []);\r\n\r\n  const submitForm = (e) => {\r\n    e.preventDefault();\r\n    let data = {\r\n      parentName: e.target[0].value,\r\n      parentPhone: e.target[1].value,\r\n      parentEmail: e.target[2].value,\r\n      childName: e.target[3].value,\r\n      childAge: e.target[4].value,\r\n      courseName: e.target[5].value,\r\n      date: e.target[6].value,\r\n      time: e.target[7].value,\r\n    };\r\n    let newErrors = { ...errors };\r\n\r\n    if (!/^\\d{10}$/.test(data.parentPhone)) {\r\n      newErrors[\"phoneNumber\"] = \"Invaid Phone Number\";\r\n    } else {\r\n      delete newErrors[\"phoneNumber\"];\r\n    }\r\n    if (\r\n      !/^([a-z0-9_\\-\\.])+\\@([a-z0-9_\\-])+\\.([a-z]{2,})$/.test(data.parentEmail)\r\n    ) {\r\n      newErrors[\"email\"] = \"Invalid Email Address\";\r\n    } else {\r\n      delete newErrors[\"email\"];\r\n    }\r\n    if (newErrors.hasOwnProperty(\"parentName\")) {\r\n      delete newErrors[\"parentName\"];\r\n    }\r\n    if (newErrors.hasOwnProperty(\"childName\")) {\r\n      delete newErrors[\"childName\"];\r\n    }\r\n    if (newErrors.hasOwnProperty(\"timeSlot\")) {\r\n      delete newErrors[\"timeSlot\"];\r\n    }\r\n    setErrors(newErrors);\r\n    if (!Object.keys(newErrors).length) {\r\n      axios\r\n        .post(\"http://localhost:2000/bookSession\", data)\r\n        .then((response) => {\r\n          NotificationManager.success(response.data.message, \"\", 2000);\r\n          setValidated(true);\r\n          formRef.current.reset();\r\n          setValidated(false);\r\n        })\r\n        .catch((error) => {\r\n          NotificationManager.error(\r\n            \"please enter\" + error.response.data.message,\r\n            \"\",\r\n            2000\r\n          );\r\n          let errormsg = error.response.data.message.split(\",\");\r\n          let newErrors = { ...errors };\r\n          for (let key of errormsg) {\r\n            newErrors[key] = key;\r\n          }\r\n          setErrors(newErrors);\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {courseData ? (\r\n        <Form onSubmit={submitForm} ref={formRef} validated={validated}>\r\n          <Form.Group controlId=\"pname\">\r\n            <Form.Label>Parent's Name</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Enter parent name\" />\r\n            {errors.hasOwnProperty(\"parentName\") && (\r\n              <p\r\n                style={{ color: \"red\" }}\r\n              >{`Please Enter the ${errors.parentName}`}</p>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"pnumber\">\r\n            <Form.Label>Parent's Contact Number</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter parent Contact number\"\r\n            />{\" \"}\r\n            {errors.hasOwnProperty(\"phoneNumber\") && (\r\n              <p style={{ color: \"red\" }}>{errors.phoneNumber}</p>\r\n            )}\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"pemail\">\r\n            <Form.Label>Parent's Email ID</Form.Label>\r\n            <Form.Control type=\"email\" placeholder=\"Enter parent email\" />\r\n            {errors.hasOwnProperty(\"email\") && (\r\n              <p style={{ color: \"red\" }}>{errors.email}</p>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"cname\">\r\n            <Form.Label>Child's Name</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Enter child name\" />\r\n            {errors.hasOwnProperty(\"childName\") && (\r\n              <p\r\n                style={{ color: \"red\" }}\r\n              >{`Please Enter the ${errors.childName}`}</p>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group controlId=\"cage\">\r\n            <Form.Label>Child's Age</Form.Label>\r\n            <Form.Control type=\"number\" placeholder=\"Enter child age\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"coursename\">\r\n            <Form.Label>Course Name</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              type=\"text\"\r\n              onChange={(e) => {\r\n                let data = e.target.value;\r\n                setCourseName(data);\r\n              }}\r\n            >\r\n              <option value=\"\">Select the course</option>\r\n              {courseData.map((course) => {\r\n                return (\r\n                  <option value={course.course_name}>\r\n                    {course.course_name}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Form.Control>\r\n          </Form.Group>\r\n          <Form.Group controlId=\"classdate\">\r\n            <Form.Label>Suitable Date for a trial class</Form.Label>\r\n            <Form.Control\r\n              type=\"date\"\r\n              min={moment(new Date()).format(\"YYYY-MM-DD \")}\r\n              max={moment(new Date().setDate(new Date().getDate() + 7)).format(\r\n                \"YYYY-MM-DD\"\r\n              )}\r\n              onChange={(e) => {\r\n                let date = e.target.value;\r\n                setDateSelect(moment(date));\r\n              }}\r\n              onKeyDown={(e) => e.preventDefault()}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"timeslot\">\r\n            <Form.Label>Suitable Time Slot for the trial class</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              type=\"time\"\r\n              placeholder=\"Enter the time slot\"\r\n            >\r\n              <option value=\"\">Select the time slot</option>\r\n              {courseName &&\r\n                dateSelect &&\r\n                courseData\r\n                  .filter((course) => course.course_name === courseName)[0]\r\n                  .slots.filter((slot) => {\r\n                    if (slot.time.date() === dateSelect.date()) {\r\n                      let slot_time = slot.time;\r\n                      let finalTime = slot_time.diff(moment(), \"hours\");\r\n                      if (finalTime >= 4) {\r\n                        return true;\r\n                      } else {\r\n                        return false;\r\n                      }\r\n                    } else {\r\n                      return false;\r\n                    }\r\n                  })\r\n                  .map((timeSlot) => {\r\n                    let slot_time = moment(timeSlot.time);\r\n                    return (\r\n                      <option value={timeSlot.slot}>\r\n                        {timeSlot.time.format(\"LT\")} --{\" \"}\r\n                        {slot_time.add(\"1\", \"hours\").format(\"LT\")}\r\n                      </option>\r\n                    );\r\n                  })}\r\n            </Form.Control>\r\n            {errors.hasOwnProperty(\"timeSlot\") && (\r\n              <p\r\n                style={{ color: \"red\" }}\r\n              >{`Please Enter the ${errors.timeSlot}`}</p>\r\n            )}\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\" style={{ width: \"100%\" }}>\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      ) : (\r\n        <h1>Loading....</h1>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TrialClass;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TrialClass from \"./component/TrialClass/TrialClass\";\nimport { NotificationContainer } from \"react-notifications\";\n\nconst App = () => {\n  return (\n    <>\n      <h2 style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n        Book a Free Trial Session\n      </h2>\n      <div className=\"App\">\n        <TrialClass />\n      </div>\n      <NotificationContainer />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}